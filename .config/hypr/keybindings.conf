# l -> locked, will also work when an input inhibitor (e.g. a lockscreen) is active.
# r -> release, will trigger on release of a key.
# e -> repeat, will repeat when held.
# n -> non-consuming, key/mouse events will be passed to the active window in addition to triggering the dispatcher.
# m -> mouse, see below.
# t -> transparent, cannot be shadowed by other bind.
# i -> ignore mods, will ignore modifiers.
# s -> separate, will arbitrarily combine keys between each mod/key, see [Keysym combos](#keysym-combos) above.
# d -> has description, will allow you to write a description for your bind.
# p -> bypasses the app's requests to inhibit keybind.

$mainMod = SUPER_L
$altMod = SUPER_R

# Core functions
bind = $mainMod&Shift_L, RETURN, exec, $TERM
bind = $mainMod&Shift_L, C, killactive,
# bind = $mainMod&Shift_L, Q, exit,

# System
#bind = Control_L&Alt_L, DELETE, exec, poweroff
bind = Control_L&Alt_L, L, exec, hyprlock

# Create different types of screenshots
bind = , 0xff61, exec, hyprshot --output-folder $SCREENSHOT_PATH --mode output
bind = Alt_L, 0xff61, exec, hyprshot --output-folder $SCREENSHOT_PATH --mode window
bind = Shift_L, 0xff61, exec, hyprshot --output-folder $SCREENSHOT_PATH --mode region
bind = Control_L, 0xff61, exec, hyprshot --clipboard-only --mode output
bind = Control_L&Alt_L, 0xff61, exec, hyprshot --clipboard-only --mode window
bind = Control_L&Shift_L, 0xff61, exec, hyprshot --clipboard-only --mode region

# Change focused window state
bind = $mainMod, SPACE, togglefloating
bind = $mainMod, F, fullscreen
bind = $mainMod, S, togglesplit

# Change focused window
bind = $mainMod, H, movefocus, l
bind = $mainMod, L, movefocus, r
bind = $mainMod, K, movefocus, u
bind = $mainMod, J, movefocus, d

# Move focused window to the edge of the screen
bind = $mainMod&Shift_L, H, movewindow, l
bind = $mainMod&Shift_L, L, movewindow, r
bind = $mainMod&Shift_L, K, movewindow, u
bind = $mainMod&Shift_L, J, movewindow, d

# Move focused window
binde = $mainMod&Shift_L&Control_L, H, moveactive, -25 0
binde = $mainMod&Shift_L&Control_L, L, moveactive, 25 0
binde = $mainMod&Shift_L&Control_L, K, moveactive, 0 -25
binde = $mainMod&Shift_L&Control_L, J, moveactive, 0 25

# Resize focused window
binde = $mainMod&Shift_L&Alt_L, H, resizeactive, -25 0
binde = $mainMod&Shift_L&Alt_L, L, resizeactive, 25 0
binde = $mainMod&Shift_L&Alt_L, K, resizeactive, 0 -25
binde = $mainMod&Shift_L&Alt_L, J, resizeactive, 0 25

# Move/resize windows with mainMod + LMB/RMB and dragging
bindm = $mainMod, mouse:272, movewindow
bindm = $mainMod, mouse:273, resizewindow

# Switch workspaces with mainMod + [0-9]
bind = $mainMod, 1, workspace, 1
bind = $mainMod, 2, workspace, 2
bind = $mainMod, 3, workspace, 3
bind = $mainMod, 4, workspace, 4
bind = $mainMod, 5, workspace, 5
bind = $mainMod, 6, workspace, 6
bind = $mainMod, 7, workspace, 7
bind = $mainMod, 8, workspace, 8
bind = $mainMod, 9, workspace, 9
bind = $mainMod, 0, workspace, 10
bind = $mainMod, Tab, workspace, previous

# Move active window to a workspace with mainMod + Shift_L + [0-9]
bind = $mainMod&Shift_L, 1, movetoworkspacesilent, 1
bind = $mainMod&Shift_L, 2, movetoworkspacesilent, 2
bind = $mainMod&Shift_L, 3, movetoworkspacesilent, 3
bind = $mainMod&Shift_L, 4, movetoworkspacesilent, 4
bind = $mainMod&Shift_L, 5, movetoworkspacesilent, 5
bind = $mainMod&Shift_L, 6, movetoworkspacesilent, 6
bind = $mainMod&Shift_L, 7, movetoworkspacesilent, 7
bind = $mainMod&Shift_L, 8, movetoworkspacesilent, 8
bind = $mainMod&Shift_L, 9, movetoworkspacesilent, 9
bind = $mainMod&Shift_L, 0, movetoworkspacesilent, 10

# Launch apps
bind = $mainMod, R, exec, wofi
bind = $mainMod&Alt_L, B, exec, librewolf
bind = $mainMod&Alt_L, T, exec, telegram-desktop
bind = $mainMod&Alt_L, E, exec, $LAUNCH_IN_TERM ranger
bind = $mainMod&Alt_L, N, exec, $LAUNCH_IN_TERM newsboat
bind = $mainMod&Alt_L, M, exec, $LAUNCH_IN_TERM neomutt
bind = $mainMod&Alt_L, P, exec, hyprpicker | wl-copy && notify-send 'Color Picker' 'Picked color is placed to the clipboard' || notify-send 'Color Picker' 'Failed to pick a color'
bind = $mainMod&Alt_L, X, exec, $LAUNCH_IN_TERM profanity
bind = $mainMod&Alt_L, A, exec, $LAUNCH_IN_TERM iamb

# Launch scripts
bind = $mainMod&Control_L, P, exec, passmenu 'show' 'wofi -iS dmenu' 'ydotool type -d 1 -f -'
bind = $mainMod&Control_L, O, exec, passmenu 'otp' 'wofi -iS dmenu' 'ydotool type -d 1 -f -'
bind = $mainMod&Control_L, Q, exec, clipboard-to-qrcode
bind = $mainMod&Control_L, E, exec, emojimenu '/home/cuqmbr/.local/bin/emojis_with_descriptions.txt' 'wofi -iS dmenu' 'wl-copy'
bind = $mainMod&Control_L, V, exec, clipboard_entry=$(cliphist list | wofi -iS dmenu | cliphist decode); if [ ! -z "${clipboard_entry}" ]; then echo "${clipboard_entry}" | wl-copy; notify-send "cliphist" "Clipboard updated."; fi
bind = $mainMod&Control_L, X, exec, cliphist wipe && notify-send "cliphist" "clipboard wiped" || notify-send "cliphist" "failed to wipe clipboard"
bind = $mainMod&Control_L, C, exec, hex=$(hyprpicker -n); echo "${hex}" | wl-copy; notify-send "hyprpicker" "Color ${hex} copied to clipboard."

# VPN
# XKB_KEY_bracketright
bind = $mainMod&Control_L, 0x005b, exec, $LAUNCH_IN_TERM sh -c 'sleep 0.1s; hyprctl dispatch setfloating; hyprctl dispatch resizeactive exact 50% 10%; hyprctl dispatch centerwindow; connmanctl enable offline; connmanctl disable offline; sleep 1; connmanctl disconnect vpn_46_226_165_165_family_vpn_cuqmbr_xyz; doas sv restart doh-client; sleep 2; location=$(curl -s api.myip.com | jq ".country"); notify-send "VPN Connection" "Your ip-based location is ${location}."'
# XKB_KEY_bracketleft
bind = $mainMod&Control_L, 0x005d, exec, $LAUNCH_IN_TERM sh -c 'sleep 0.1s; hyprctl dispatch setfloating; hyprctl dispatch resizeactive exact 50% 10%; hyprctl dispatch centerwindow; connmanctl enable offline; connmanctl disable offline; sleep 5; connmanctl connect vpn_46_226_165_165_family_vpn_cuqmbr_xyz; doas sv restart doh-client; sleep 2; location=$(curl -s api.myip.com | jq ".country"); notify-send "VPN Connection" "Your ip-based location is ${location}."'

# Reload waybar
bind = $mainMod&Control_L, W, exec, kill -9 $(pgrep waybar); WAYBAR_USER=$USER envsubst < ~/.config/waybar/config.jsonc > /tmp/waybar.jsonc; waybar -c /tmp/waybar.jsonc &

# Bluetooth
# XKB_KEY_apostrophe
bind = $mainMod&Control_L, 0x0027, exec, rfkill unblock bluetooth; sleep 0.5s; bluetoothctl power on && notify-send "Bluetooth Manager" "Enabled" || notify-send "Bluetooth Manager" "Failed to Enable"
# XKB_KEY_semicolon
bind = $mainMod&Control_L, 0x003b, exec, rfkill block bluetooth; sleep 0.5s; bluetoothctl power off && notify-send "Bluetooth Manager" "Disabled" || notify-send "Bluetooth Manager" "Failed to Disable"

# Function keys
bind = , XF86AudioPrev, exec, playerctl previous
bind = , XF86AudioPlay, exec, playerctl play-pause
bind = , XF86AudioNext, exec, playerctl next
binde = , XF86AudioLowerVolume, exec, wpctl set-volume -l 1.5 @DEFAULT_AUDIO_SINK@ 5%-
binde = , XF86AudioRaiseVolume, exec, wpctl set-volume -l 1.5 @DEFAULT_AUDIO_SINK@ 5%+
bind = , XF86AudioMute, exec, wpctl set-mute @DEFAULT_AUDIO_SINK@ toggle
bind = , XF86AudioMicMute, exec, wpctl set-mute @DEFAULT_AUDIO_SOURCE@ toggle
bind = $altMod, C, exec, wpctl set-mute @DEFAULT_AUDIO_SOURCE@ toggle
